>>> aaa=[1,2,3,4,5]
>>> aaa
[1, 2, 3, 4, 5]
>>> aaa=[1,2,홍길동,3,바보]
>>> aaa=[1,2,'홍길동',3,'바보']
>>> aaa
[1, 2, '홍길동', 3, '바보']
>>> bbb=['boy','girl',aaa]
>>> bbb
['boy', 'girl', [1, 2, '홍길동', 3, '바보']]

배열안에 int 나 strig 둘다가능 하고 배열 안에 배열도 가능하다.


>>> aaa=[1,2,3]
>>> aaa=aaa+[4,5]
>>> aaa
[1, 2, 3, 4, 5]

크기가 정해져 있지 않고 가변적이다.



>>> aaa.append('hi')
>>> aaa
[1, 2, 3, 4, 5, 'hi']

>>> aaa[6]='boy'
Traceback (most recent call last):
  File "<pyshell#12>", line 1, in <module>
    aaa[6]='boy'
IndexError: list assignment index out of range

append 를 써야 넣을수 있다.




>>> aaa[5]='good'
>>> aaa
[1, 2, 3, 4, 5, 'good']
>>> for i in aaa:
	print(i)


1
2
3
4
5
good
>>> for x in range(len(aaa)):
	aaa[x]=x*10


>>> aaa
[0, 10, 20, 30, 40, 50]

len = 길이를 뜻한다.



>>> for x in range(6):
	print(aaa[x])


0
10
20
30
40
50


for 문 쓸 때 두가지 방법이 있다. 리스트 자체를 쓰거나 아니면 값자체를 나타내는 방법이 있다.



<list>

>>> aaa=list('hello')
>>> aaa
['h', 'e', 'l', 'l', 'o']
>>> aaa=list(range(10,19))
>>> aaa
[10, 11, 12, 13, 14, 15, 16, 17, 18]





<시퀀스 자료>

>>> aaa
[0, 0, 0, 0, 0]
>>> aaa=[0]*10
>>> aaa
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

>>> aaa=[1,2]*15
>>> aaa
[1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]
>>>



>>> aaa
[[0], [0], [0], [0], [0]]
>>> aaa=[[0]]
>>> aaa=[[0]]*5
>>> aaa
[[0], [0], [0], [0], [0]]
>>> aaa=[[0,0,0]]*5
>>> aaa
[[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
>>> aaa=[[0]*100]*5
>>> aaa
[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]



>>> aaa=[[0]*5]*3
>>> aaa
[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

3행 5열 짜리




<슬라이스>

>>> aaa
[1, 2, 3, 4, 5, 6, 7]
>>> bbb=aaa[2:4]
>>> bbb
[3, 4]

시작점부터 과 끝점전까지



<pop> <del> <remove> 지우는 세가지 방식


>>> aaa=[1,2,3,4,5,6,7]
>>> aaa
[1, 2, 3, 4, 5, 6, 7]
>>> bbb=aaa[2:4]
>>> bbb
[3, 4]
>>> aaa[0]=100
>>> aaa
[100, 2, 3, 4, 5, 6, 7]
>>> aaa.append(8)
>>> aaa
[100, 2, 3, 4, 5, 6, 7, 8]
>>> aaa.pop()
8
>>> aaa
[100, 2, 3, 4, 5, 6, 7]


pop으로 뺄 수 있다.

>>> aaa
[100, 2, 3, 4, 5, 6, 7]
>>> aaa.pop(2)
3
>>> aaa
[100, 2, 4, 5, 6, 7]

원하는 위치에 부분을 뺄 수도 있다.



>>> aaa
[100, 2, 4, 5, 6, 7]
>>> aaa.remove(5)
>>> aaa
[100, 2, 4, 6, 7]
>>> del aaa[0]
>>> aaa
[2, 4, 6, 7]


<aaa.append><aaa.insert(3,20)>  넣는 방법 2가지

>>> aaa
[2, 4, 6, 7]
>>> aaa.insert(3,20)
>>> aaa
[2, 4, 6, 20, 7]

append 는 맨뒤에 넣고  insert는 원하는 부분에 넣는다



<index>

>>> aaa
[2, 4, 6, 20, 7]
>>> aaa.index(2)
0

원하는 부분이 어디에 위치해 있는지 찾는 것



<비교>
>>> aaa=[1,2,3]
>>> bbb=[1,2,3]
>>> aaa==bbb
True
>>> bbb=[1,2,4]
>>> aaa==bbb
False


>>> bbb=[1,2,3,4]
>>> aaa=bbb
>>> aaa
[1, 2, 3, 4]
>>> bbb=[1,2,3]
>>> aaa==bbb
False
>>> aaa<bbb
False

원소를 하나 씩 비교 할 수 있다.



<aaa.sort> <sorted(aaa)>

>>> aaa=[7,8,9,2,3]
>>> aaa.sort()
>>> aaa
[2, 3, 7, 8, 9]

sort 는 값의 위치를 바꿔준다,

>>> aaa
[2, 3, 7, 8, 9]
>>> aaa=[2,3,4,8,7]
>>> sorted(aaa)
[2, 3, 4, 7, 8]
>>> aaa
[2, 3, 4, 8, 7]


sorted 는 값을 정리해서 보여주지만 값의 위치는 바뀌지 않는다.


<얕은 복사 / 깊은 복사>

얕은 복사
scores = [ 10, 20, 30, 40, 50 ]
values = scores

주소를 복사해 soces 가 바뀌면 values 도 바뀐다.

깊은 복사
>>> aaa=[1,2,3]
>>> bbb=list(aaa)
>>> bbb
[1, 2, 3]


새로운 메모리에 bbb를 만드는 것이므로 aaa가 바껴도 bbb는 원래의 형태를 유지한다.



<리스트 함축>


>>> aaa=[ 0 for x in range(10)]
>>> aaa
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

>>> aaa=[ x+1 for x in range(10)]
>>> aaa
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

aaa = [0]*10
과 같다.
